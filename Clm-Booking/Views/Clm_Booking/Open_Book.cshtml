@model Clm_Booking.Models.ClientClm

@{
    ViewBag.Title = "Open Book";
}


@section css{

    <style>
        #timepicker:before {
            content: 'Time: HR:MM: AM/PM';
            margin-right: .6em;
            color: #9d9d9d;
        }

        td.Unavailable, table.ui-datepicker-calendar tbody td.Unavailable a {
            background: none !important;
            background-color: red !important;
            color: deeppink !important;
        }

        a {
            text-decoration: none;
        }

            a:hover {
                color: cadetblue;
                text-decoration: none;
            }

        td.ui-datepicker-week-end {
            visibility: hidden;
        }
        /*.time-size{
            width:20%;
            height:calc(1.3em + .75rem + 2px);
            border-radius:3px;
            padding:.375rem .75rem;
            display:block;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }*/
    </style>

}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

<div style="padding:4rem;">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="container">
        <h4>Schedule Appointment</h4>
        <b style="color:darkred;"> @ViewBag.Success </b>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.firstname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.firstname, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                @Html.ValidationMessageFor(model => model.firstname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.lastname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.lastname, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                @Html.ValidationMessageFor(model => model.lastname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bookdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bookdate, new { htmlAttributes = new { @class = "form-control dates", placeholder = "Date" } })
                @Html.ValidationMessageFor(model => model.bookdate, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.booktime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.booktime, new { htmlAttributes = new { @class = "form-control", id = "timepicker", placeholder = "Time" } })
                @Html.ValidationMessageFor(model => model.booktime, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <p class="control-label timing col-md-2"> Time</p>
            <div class="col-md-10">
                <select id="time-select" class="form-control" name="booktime"></select>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div> 
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.phonenumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.phonenumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone Number" } })
                @Html.ValidationMessageFor(model => model.phonenumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.comments, new { @class = "form-control", cols = "3" })
                @Html.ValidationMessageFor(model => model.comments, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Book Appointment" class="btn btn-primary" />
            </div>
        </div>
    </div>
    }

</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            var unavailableTime = [];

        $(".dates").datepicker({ dateFormat: 'yy-mm-dd' })
                      .on("change", function() {
                          // get date value
                          var datetime = $(".dates").datepicker().val();
                          console.log(datetime + " datetime ");
                          $.get("@Url.Action("GetAllTime","Clm_Booking")", { datetime: datetime });

                          //console.log(datetime.times + " returned time ");

                          $.get("@Url.Action("GetAllTimes","Clm_Booking")", function (data) {

                                  var time = data.time;
                                  console.log(time + " times booked");

                                  for (var i = 0; i < time.length; i++) {
                                      unavailableTime.push(ToJavaScriptTime(time[i]).slice(0, 5).toString());
                                      showAvailableTime(unavailableTime);
                                  }
                                });
                      });


            // Time Functions

            function ToJavaScriptTime(time) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(time);
                    var dt = new Date(parseFloat(results[1]));

                return (dt.toTimeString());

            }


            var workingTime = ["09:30", "10:00", "10:30", "11:00", "11:30", "12:00","12:30","01:00","03:30","04:00","04:30","05:00"];

            function arr_diff(a1, a2) {

                var a = [], diff = [];

                for (var i = 0; i < a1.length; i++) {
                    a[a1[i]] = true;
                }

                for (var i = 0; i < a2.length; i++) {
                    if (a[a2[i]]) {
                        delete a[a2[i]];
                    } else {
                        a[a2[i]] = true;
                    }
                }

                for (var k in a) {
                    diff.push(k);
                }

                return diff;
            }

            var select = document.getElementById("time-select");

            function appendOptions(time) {
                select.innerHTML = "";
                for (var i = 0; i < time.length; i++) {
                    let timeText = document.createTextNode(time[i]);
                    var option = document.createElement("option");
                    option.appendChild(timeText);
                    select.appendChild(option);
                }
            }
            appendOptions(workingTime);

            function showAvailableTime(bookedTime) {
                const workingTimeCopy = [...workingTime];
                const availableTime = arr_diff(workingTimeCopy, bookedTime);
                appendOptions(availableTime);
            }


        });

    </script>



}



