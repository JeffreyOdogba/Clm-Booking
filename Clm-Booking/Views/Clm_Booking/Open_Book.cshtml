@model Clm_Booking.Models.ClientClm

@{
    ViewBag.Title = "Open Book";
}


@section css{
    
    <style>
        #timepicker:before {
            content: 'Time: HR:MM: AM/PM';
            margin-right: .6em;
            color: #9d9d9d;
        }

        a {
            text-decoration: none;
        }

            a:hover {
                color: cadetblue;
                text-decoration: none;
            }

            td.ui-datepicker-week-end { visibility:hidden; }
    </style>

}
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />

<div style="padding:4rem;">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="container">
            <h4>Schedule Appointment</h4>
            <b style="color:darkred;"> @ViewBag.Success </b>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.firstname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.firstname, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                    @Html.ValidationMessageFor(model => model.firstname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.lastname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.lastname, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                    @Html.ValidationMessageFor(model => model.lastname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.bookdate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.bookdate, new { htmlAttributes = new { @class = "form-control dates", placeholder = "Date" } })
                    @Html.ValidationMessageFor(model => model.bookdate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.booktime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.booktime, new { htmlAttributes = new { @class = "form-control", id = "timepicker", placeholder = "Time" } })
                    @Html.ValidationMessageFor(model => model.booktime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email" } })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.phonenumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.phonenumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone Number" } })
                    @Html.ValidationMessageFor(model => model.phonenumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.comments, new { @class = "form-control", cols = "3" })
                    @Html.ValidationMessageFor(model => model.comments, "", new { @class = "text-danger" })
                </div>
            </div>
            
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Book Appointment" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }

</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            var unavailableDate = ["7/12/2019", "7/16/2019", "7/23/2019"];
            var unavailableDates;
            var useddate;


            $.get("@Url.Action("GetAvailableDate","Clm_Booking")", function (data) {
                // date gotten from the back 
                date = data.dates;
                //this is the json format
                console.log(date);
                console.log("---------");
                //loop through all date to format them 
                for (var i = 0; i < date.length; i++) {                  
                   unavailableDates= ToJavaScriptDate(date[i]);                
                    
                    console.log(unavailableDates);
                }

                // This for changing the Data format from Back-side to Client side for Javascript
                function ToJavaScriptDate(date) {
                    var pattern = /Date\(([^)]+)\)/;
                    var results = pattern.exec(date);                
                    var dt = new Date(parseFloat(results[1]));                     
                    
                    return [(dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear()];
                  
            }                

                console.log("After Con-----");
                // This is the datepicker with callback function
                 $('.dates').datepicker({
                        beforeShowDay: function(d) {
                        dmy = d.getMonth() + 1 + "/" + d.getDate() + "/" + d .getFullYear();
                        if ($.inArray(dmy, unavailableDates) != -1) {
                            return [false, "","Available"]; 
                        } else{
                             return [true,"","unAvailable"]; 
                        }
                    }
                    });
            });

            $('#timepicker').timepicker({
                'minTime': '9:30am',
                'maxTime': '5:00pm',
                'disableTimeRanges': ['01:00pm', '02:30pm']
            });
           
        });

    </script>



}



